{"version":3,"sources":["books.js"],"names":["express","require","router","Router","nodemailer","Book","createTransport","service","auth","user","process","env","EMAIL","pass","PASSWORD","req","body","title","author","publishedYear","genre","availableCopies","email","post","newBook","save","transporter","sendMail","mailOptions","error","console","log","info","response","subject","json","res","status","message","_context","t0","get","books","regeneratorRuntime","async","_context2","prev","next","awrap","find","sent","stop","findById","params","id","book","_context3","patch","updatedBook","_context4","abrupt","_context5","remove","module","exports"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,OAASF,QAAQG,SADjBH,KAAOC,QAAU,kBAGjBG,WAAaH,QAAQ,cADrBI,YAAeD,WAAAE,gBAArB,CAKEC,QAAS,QAJXC,KAAMJ,CAMFK,KAAMC,QAAQC,IAAIC,MAClBC,KAAMH,QAAQC,IAAIG,YAAlBD,OAAAA,KAAMH,OAAQC,SAAIG,EAAAA,GAAJH,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAIlBI,EAAAC,KANQC,EAEUN,EAFVM,MAAAC,EAEUP,EAFVO,OAAAC,EAEUR,EAFVQ,cAAAC,EAEUT,EAFVS,MAAAC,EAEUV,EAFVU,gBAAAC,EAEUX,EAFVW,MAEUX,EAAAA,KAAAA,EAKXY,EAAa,IAAAlB,KAAA,CAAAY,MAAAA,EAMdC,OAAAA,EANcC,cAAAA,EAAAC,MAAAA,EAAAC,gBAAAA,IALFV,EAAAA,KAAAA,EAAAA,mBAAAA,MAKEa,EAAAC,QALFd,KAAAA,EAUZM,EADuB,CAEvBC,KAAAA,QAAAA,IAAAA,MACAC,GAAAA,EACAC,QAAAA,0BACAC,KAAAA,aAAAA,OAAAA,EAAAA,qCATcK,YAAAC,SAAAC,EAAA,SAAAC,EAWVL,GAWJ,GAAIK,EAtBU,OAAAC,QAAAC,IAAAF,GAcVD,QAAAA,IAAAA,eAAcI,EAAAC,YAGlBC,EAAAA,OAAAA,KAAOC,KAAEX,GAtBGb,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAmBMyB,EAAAC,OAdJ,KAAAF,KAAA,CAAAG,QAAAC,EAAAC,GAAAF,UALF3B,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,QAwClBT,OAAOuC,IAAI,IAAK,SAAO1B,EAAKqB,GAAZ,IAAAM,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAdZ3C,KAAA4C,QAcY,KAAA,EATXP,EASWG,EAAAK,KAPZd,EAAAA,KAAGM,GAOSG,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAL,GAAAK,EAAA,MAAA,GAnCIT,EAAAC,OAAA,KAAAF,KAAA,CAAAG,QAAAO,EAAAL,GAAAF,UAmCJ,KAAA,GAAA,IAAA,MAAA,OAAAO,EAAAM,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OALZf,OAAAA,IAAAA,OAAIC,SAAYF,EAAKC,GAAjBC,IAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAAJhC,KAAA+C,SAAArC,EAAAsC,OAAAC,KAAIjB,KAAAA,EAAAA,GAkBQ,OAlBSkB,EAAjBlB,EAAAA,MAAAA,OAAAA,EAAAA,OAAAA,SA9BYD,EAAAC,OAAA,KAAAF,KAAA,CAAAG,QAAA,oBA8BZD,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EA9BYD,EAAAD,KAAAoB,GA8BZlB,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GA9BYD,EAAAC,OAAA,KAAAF,KAAA,CAAAG,QAAAkB,EAAAhB,GAAAF,UA8BZD,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,OAKQnC,OAAAuD,MAAA,OAAA,SAAA1C,EAAAqB,GAAA,IAAAmB,EAAAG,EAAA,OAAAf,mBAAAC,MAAA,SAAAe,GAAA,OAAA,OAAAA,EAAAb,KAAAa,EAAAZ,MAAA,KAAA,EAAA,OAAAY,EAAAb,KAAA,EAAAa,EAAAZ,KAAA,EAAAJ,mBAAAK,MAAA3C,KAAA+C,SAAArC,EAAAsC,OAAAC,KAAA,KAAA,EAAA,GAAA,OAAAC,EAAAI,EAAAT,MAAA,OAAAS,EAAAC,OAAA,SAAAxB,EAAAC,OAAA,KAAAF,KAAA,CAAAG,QAAA,oBAAAqB,EAAAZ,KAAA,EAAA,MAAA,KAAA,EAAA,OAAA,MAAAhC,EAAAC,KAAAC,QA+BVsC,EAAKtC,MAAQF,EAAIC,KAAKC,OA/BZ,MAENyB,EAAAA,KAFMxB,SAGZkB,EAAAA,OAASM,EAAT1B,KAAAE,QAHY,MAAAH,EAAAC,KAAAG,gBAqCVoC,EAAKpC,cAAgBJ,EAAIC,KAAKG,eArCpB,MAAAJ,EAAAC,KAAAI,QAAAmC,EAAAnC,MAAAL,EAAAC,KAAAI,OAK0BkB,MAAfA,EAAAA,KAAAA,kBAAFiB,EAArBlC,gBAAAN,EAAAC,KAAAK,iBALYsC,EAAAZ,KAAA,GAAAJ,mBAAAK,MAAAO,EAAA9B,QAAA,KAAA,GAAAiC,EAAAC,EAAAT,KAAAd,EAAAD,KAAAuB,GAAAC,EAAAZ,KAAA,GAAA,MAAA,KAAA,GAAAY,EAAAb,KAAA,GAAAa,EAAAnB,GAAAmB,EAAA,MAAA,GAAAvB,EAAAC,OAAA,KAAAF,KAAA,CAAAG,QAAAqB,EAAAnB,GAAAF,UAAA,KAAA,GAAA,IAAA,MAAA,OAAAqB,EAAAR,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,QAUGjD,OAAA,OAAA,OAAA,SAAAa,EAAAqB,GAAA,IAAAmB,EAAA,OAAAZ,mBAAAC,MAAA,SAAAiB,GAAA,OAAA,OAAAA,EAAAf,KAAAe,EAAAd,MAAA,KAAA,EAAA,OAAAc,EAAAf,KAAA,EAAAe,EAAAd,KAAA,EAAAJ,mBAAAK,MAAA3C,KAAA+C,SAAArC,EAAAsC,OAAAC,KAAA,KAAA,EAAA,GAAA,OAAAC,EAAAM,EAAAX,MAAA,OAAAW,EAAAD,OAAA,SAAAxB,EAAAC,OAAA,KAAAF,KAAA,CAAAG,QAAA,oBAAAuB,EAAAd,KAAA,EAAA,MAAA,KAAA,EAAA,OAAAc,EAAAd,KAAA,EAAAJ,mBAAAK,MAAAO,EAAAO,UAAA,KAAA,EAoDf1B,EAAID,KAAK,CAAEG,QAAS,iBApDLuB,EAAAd,KAAA,GAAA,MAAA,KAAA,GAAAc,EAAAf,KAAA,GAAAe,EAAArB,GAAAqB,EAAA,MAAA,GAETN,EAAAA,OAFS,KAAApB,KAAA,CAAAG,QAAAuB,EAAArB,GAAAF,UAAA,KAAA,GAAA,IAAA,MAAA,OAAAuB,EAAAV,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,QAAAY,OAAAC,QAAA9D","file":"books.min.js","sourcesContent":["const express = require(\"express\");\r\nconst router = express.Router();\r\nconst Book = require(\"../models/Book\");\r\nconst nodemailer = require(\"nodemailer\");\r\n\r\n// Email configuration\r\nconst transporter = nodemailer.createTransport({\r\n  service: \"gmail\",\r\n  auth: {\r\n    user: process.env.EMAIL,\r\n    pass: process.env.PASSWORD,\r\n  },\r\n});\r\n\r\n// Add a new book\r\nrouter.post(\"/add\", async (req, res) => {\r\n  const { title, author, publishedYear, genre, availableCopies, email } =\r\n    req.body;\r\n  try {\r\n    const newBook = new Book({\r\n      title,\r\n      author,\r\n      publishedYear,\r\n      genre,\r\n      availableCopies,\r\n    });\r\n    await newBook.save();\r\n\r\n    // Send confirmation email\r\n    const mailOptions = {\r\n      from: process.env.EMAIL,\r\n      to: email,\r\n      subject: \"Book Added Successfully\",\r\n      text: `The book \"${title}\" has been added to the library.`,\r\n    };\r\n\r\n    transporter.sendMail(mailOptions, (error, info) => {\r\n      if (error) {\r\n        return console.log(error);\r\n      }\r\n      console.log(\"Email sent: \" + info.response);\r\n    });\r\n\r\n    res.status(201).json(newBook);\r\n  } catch (error) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n});\r\n\r\n// View all books\r\nrouter.get(\"/\", async (req, res) => {\r\n  try {\r\n    const books = await Book.find();\r\n    res.json(books);\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n});\r\n\r\n// View a single book by ID\r\nrouter.get(\"/:id\", async (req, res) => {\r\n  try {\r\n    const book = await Book.findById(req.params.id);\r\n    if (book == null) {\r\n      return res.status(404).json({ message: \"Book not found\" });\r\n    }\r\n    res.json(book);\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n});\r\n\r\n// Update a book\r\nrouter.patch(\"/:id\", async (req, res) => {\r\n  try {\r\n    const book = await Book.findById(req.params.id);\r\n    if (book == null) {\r\n      return res.status(404).json({ message: \"Book not found\" });\r\n    }\r\n\r\n    if (req.body.title != null) {\r\n      book.title = req.body.title;\r\n    }\r\n    if (req.body.author != null) {\r\n      book.author = req.body.author;\r\n    }\r\n    if (req.body.publishedYear != null) {\r\n      book.publishedYear = req.body.publishedYear;\r\n    }\r\n    if (req.body.genre != null) {\r\n      book.genre = req.body.genre;\r\n    }\r\n    if (req.body.availableCopies != null) {\r\n      book.availableCopies = req.body.availableCopies;\r\n    }\r\n\r\n    const updatedBook = await book.save();\r\n    res.json(updatedBook);\r\n  } catch (error) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n});\r\n\r\n// Delete a book\r\nrouter.delete(\"/:id\", async (req, res) => {\r\n  try {\r\n    const book = await Book.findById(req.params.id);\r\n    if (book == null) {\r\n      return res.status(404).json({ message: \"Book not found\" });\r\n    }\r\n\r\n    await book.remove();\r\n    res.json({ message: \"Book deleted\" });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"]}